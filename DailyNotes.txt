JAVA:
=====
programming language:
====================

English,Telugu,Hindi

communicate with machines
==========================

Machine language---------binary language/byte code-----------> 0's and 1's

applications:
=============

2 types:

 1.standalone /desktop applications:
 
   Eg: notepad,calculator etc

 2. distrubuted app/ network applications:
 
    Eg: Gmail, whatsp,facebook,instagram....

  2 types :
  =========

 1.pop(procedure oriented programming language)
 
  eg: c,cobol,b etc...

 2.oop(object oriented programming language)
 
   eg: java,python,c++,.net
   
   oop offers
   ==========   
   
   2 features:
   ===========
   
   1.performance
   
   2.security
   
  oops paradigm:
  =============
  4 concepts
  
  1.inheritance
  2.polymorphisam--------performance
  
  3.abstruction
  4.encapsulation--------------->> security
  
  
  java:
  =====
  java is a object oriented programming language
  
  which can be used develop both standlone and distrubuted applications.
  
  History of java:
  ================
  
  java was developed and realeased by--------->> sun micro systems
  
  in the year 1995
  
  oracle corporation
  
  who is the father of java??
  ===========================
  
  games gosling
  
  versions:
  ===========
  
  current version is:  java se 21
  ===================
  
  standard versions : java se 8,11 ,17 or 21
  ==================
  
  Long term support(LTS)
  ----------------------
  
  march and september....
  
  3 types of Editions:
  ======================
  
  1.Java Standard Edition(jse): standalone appl---- core java
  
  2.Java Enterprise Edition(jee): distrubuted-- advanced
  
  3.Java micro/mobile Edition(jme): mobile applications
  
  
  prerequisties of java program:
  
  ==============================
  1.we need to download software/ install the software
  
    jdk-----(java development kit)
	
	www.oracle.com
	
  2 we need editors
  
  notepad,notepadd++, Eclipse,netbeans,intellij
  
  3.write the code
  
  4.save the file(.java extension)
  
  5.compile the program
  
  6.Execute the program
  
  Structure of the java program:
  ==============================
  
  class <Classname>{
  
  public static void main(String[] args){
  
  // logic
  
  }
  
  
  }
  
  compile the program:
  ==================
  
  compiler
  
  converting high level language into Machine level language
  
           compiler
  source -------------->>byte code
  .java                  .class
  
  compilation
  ===========
  
  To compile:
  ===========
  javac Filename.java
  
  To Execute:
  ===========
  
  java Classname
  
  Why java??
  ==========
  
  1.platform independence:
  ==========================
  
       java is platform independent
	   
	    WORA----> write once run anywhere
		
		windows,linux,mac
		
		
		.windows ------------------------> Linux
		.class file                       .classfile
		
		
  2.Garbage collection:
  ========================
  
  500 variables(memory spaces)
  
  2 variables------498 are wasted
  
  Garbage collector-------unwanted memory space
  
  Garbage collection----------------increase performance
  
  
  Fundamentals of java:
  =====================
  
  class <ClassName>{
  
  public static void main(String args[]){
  
  // logic
  
  }
  
  
  keywords:
  =========
  we have 53 keywords
  
  }
  class: every java code need to be written inside the class
  
  main():
  
  ** compilation start from first line of the code and execution start from the main method
  
  jvm ----java virtual machine
  
  
  class : keyword which is used to dclare the class body
  
  main():  name of the method..
  
  public : keyword and acceess modifier
  
  static : keyword ----- class properties
  
  void : keyword --- it returns nothing
  
  String[] args: predefine class and used for data types
  
  args---> parameter for main method
  
  System.out.println: Sytem is a predefined class and out is a obj for a system and println is a mrthos
  
  working of java program:
  ==========================
                    compiler           jvm                       cpu
  java source code---------  byte code-------- Machine languge----------------output
                            .class file
  
  jdk,jre,jvm:
  ===========
  
  jdk:   java development kit
  
  jre: java runtime enviornment
  
  jvm : java virtual machine
  
  1.jdk:  development tools + [jre]
  ======
  deveopment tools   -----compiler and debugger
  jre
  
  2.jre 
  
  jvm and class libraries
  
  super set of jvm
  
  ** dont have any tools
  
  3.jvm(java virtual machine)
  
  jvm is resopnsible for cheching and executiong our java code
  
  
  
  langugage fundamentals:
  ========================
  1.mainmethod()
  
  2.data types
  
  3.keywords
  
  4.identifiers
  
  5.commandline arguments
  
  6.arrays
  
  https://www.javatpoint.com/javafx-how-to-install-java
  
  how we check java download or notepad
  
  ****** java -version
  
  (minuse)
                               
  keywords:
  ==========
  
  we have 53 keywords
  
  all the keywords need to be a lower case only....
  
  identifiers:
  ===========
  ** any name in java is said to be a identifier
  
  class name,variable name,method name
  
  Rules:
  ======
  a to z
  A to Z
  0 to 9
  
  **** 2 symbols are allowed
  
  1.$(doloor)
  
  2._(underscore)
  
  restrictions:
  ============
  1. no other symbols are allowd
  
  2. should not start with the digits
  
  3. keywords are not used allowed as a identifier..
  
  eg:
  Welcome
  
  class <Classname>{
         HelloWorld
  
  public static void main(String[] args){
  
  // logic
  
  }
  
  
  }
  
  ** classname
  ** main methd name
  ** String 
  ** args[]
  
  eg:
       name1-----> it is valid
	   1name------> it is not valid
	   
	   num = 10;
	   
	   Num = 20;// both difference
	   
  ** java strictly follows the case sensitive language
  
        num$ = 10; -----valid
		
		num# = 50;----------> not allowed (in valid)
		
		public = 50;---------->> invalid
		
		** keywords are not allowed to use as a identifier...
		
		name$ -------> valid
		
		_$_$_$ --------> valid
		
		15keys-----------> invalid
		
  naming conventions:
  =================
  ** clasname always starts with the uppercase letter
  
   Eg: Helloworld
   
    HelloWorld(proper identifier)
	
* all the variables and method name follows the camelCase

    Eg: nameOfStudent------camelCase----->> variablename
	
	    additionOfTwo()---------------->> method name
	  
	  **  keywords has to be a lower case
  
  
    Datatypes:
	=========
	Eg: 
	
	student
	===========
	1.nameof the student-----------divya
	2.address------------>hyd
	3.marks--------------numeric
	
	 name = divya;
	 
	 String name = "divya";
	 
	 ** representing the data type which ww want to store..
	 
	 2 types:
	 ==========
	 
	 1.primitive datatypes
	    2 types:
		=========
		1.numeric
		2.non numeric
	 
	 2.non primitive datatypes
	 
	    eg: String,arrays,clases
		
		integer:
		--------
		
		byte 
		short
		int 
		long-------------------->> numeric type of data
		
		float--------->   End with (f)
		double----------> we can store decimals values
		
		char----------> non numeric --- single character
		
		boolean----> non numeric------ true/false
		
		
		** 1 byte = 8 bits
		
		formula:
		=======
		
		****    -------------->>  -2^n-1 to (2^n-1)-1  ------------>>  -2^8 to -2^8-1(-128 to 127)
		
		n------>> no of bits
		
		
		Datatype              sizes             ranges                         default values
		
		
		byte                  1 byte           -128 to 127                           0
		
		short                 2 byte           -32768 to 32767                       0
		
		int                   4 bytes          -2147483648 to 2147483647             0
		
		long                  8 bytes          -9,223,372,036,854 to 9,223,..        0
		
		float                 4 bytes           6 to 7 decimals                      0.0
		
		double                8 bytes           15 decimals                          0.0
		
		char                  2 bytes           unicode( 0 to 65535)                 space
		
		boolean               1 bit                  na                            false
		
		
	variables:
	==========
	A varible is nothing but name of the memory location where our data get stored..
	
	int i = 10;
	
	Syntax:
	=======
	
	<datatype><varaiblename> = data/value;
	
	=  ---------->> assignment operator
	
	eg: int i = 10; 20
	
	    20 
		
		vary + able
		
	declartion:
	========
	syntax:
	======
	<datatype><variablname>;
	
	eg: int i;
	
	intilization:
	=============
	
	syntax:
	======
	
	<datatype><varaiblename> = data/value;
	
	Eg: int i = 50;
	
	int i ;
	
	2 types:
	========
	
	1.global variables
	
	2.local variables
	
	1.local variables:
	====================
	
	variables are defined inside a method
	
	
	2.global varaibles :
	===================
	
	varaibles  are defined inside a class but outside the main method
	
	** varaible ---properties
	
	class Test{
	
	// global varaiables
	
	public static void main(String args[]){
	
	// local variables
	
	}
	
	
	}
	
	
	global varaibles are 
	
	2 types:
	========
	
	1.static variables
	
	2.instance varaibles
	
	if it is static -----> static keyword before the variable it is static variable
	if it is no static --------> instance variable
	
	
	4 properties:
	=========
	1.syntax:
	===========
	
	static ------> we can use static
	instance ----> no static keyword
	
	2.memory:
	=========
	
	static : memory will get allocating only once at the time class loading into jvm...
	=======
	
	instance: memory will get allocationg for every object creation
	=========
	
	     obj?? 
		 
		 object is instance of class ------> memory allocation
		 
		 Syntax:
		 =======
		 
		 classname objref = new classname(); // obj creattion
		 
		 Test obj = new Test();
		 
		 Test obj2 = new Test();
		 
    3.how to access :
	================
   
   
   static properties:     can be accessed by using "class name"
   ===================
   
   instance properties:
   ================        can be accessed by using obj ref
   
   4.when to use :
   ===============
   static :  country, collegename , company name -----> common properties
   ==========
   
   instance : name , contact no-----------> unique properties
   =========
   
   
   Typecasting:
   ===========
   the process of converting one data type into another data type
   
   2 types :
   =======
   
   1.widening:
   ==========   
   
     smaller data type into larger data type
	 
   
      byte---short---char---int--long--float---double
   
   2.narrowing:
   ===============
   
   explicity we have to typecasting
   
   lossy conversion:
   ================
   
   here we loss some data..while we are coverting larger to smaller
   
   
   methods:
   =======
   
   
   method is a block of code which is defined to perform specific task
   
   eg:  int a = 10;
        int b = 20;
		
		int sum = a+b;
		
		syso(sum);
		
		** code reusablity
		
	 syntax:
=============
    
     [access modifier]	<return type> <method name>(if paramerters) // method header
	 
	 {
	  // logic // method body
	 
	 }
	 
	 
	 eg:
	   
	   public static void main(String[] args){
	   
	   
	   
	   }
	   
	   ** methods get executed only when called..
		
		
	   ** methods addOfTwo()-----camelCase
	   
	   2 types:
	   ========
	   
	   1.predefined method
	   
	   2.user defined method
	   
	   main() , print(), length()
	   
	   2.user defined method:
	   ======================
	   
	   2 types :
	   ========
	   
	   1. static methods
	   2. instance metods...
	   
	   static method accessing by ----->>class name 
	   
	   instance methods accessing by using ----->> obj ref
	   
	   
	   packages:
	   ========
	   
	   packages are nothing but floders
	   
	   collection of class librariers
	   
	   package keyword
	   
	   import  keyword
	   
	   syntax:
	   ======
	   pacakge domain.company.package;
	   
	   2 types 
	   =======
	   
	   1.predefined package
	   
	   2.user defined package
	   
	   
	   **** java.lang is a default package
	   
	   **Object class is a super class for all the java classes...
	   
	       11 methods.
		   
		pacakge com.corejava.basics;
		
		import package .*;
		
		import package.classname;
		
		to compile : 
		==============
		
		
		  javac -d . filename.java
		
		
		to execute :
		
		===========
		
		java packagename.filename
		
		
		
		
		
	   
	   
	   
		
		