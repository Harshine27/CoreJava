Spring Boot:
============
Spring Boot is a project that is built on the top of the Spring Framework.

*>> It provides an easier and faster way to set up, configure, and run both simple and web-based applications.


>>It is a Spring module that provides the RAD (Rapid Application Development) feature to the Spring Framework.

>>It is used to create a stand-alone Spring-based application that you can just run because it needs minimal Spring configuration.

** Spring Boot is the combination of Spring Framework and Embedded Servers.

>>Spring Boot is a module of Spring Framework.

 It allows us to build a stand-alone application with MINIMAL OR ZERO CONFIGURATIONS. 

..>>It is better to use if we want to develop a simple Spring-based application or RESTful services.

SPRING BOOT offers :-
====================
1.Spring Boot Framework is widely used to develop REST APIs.

2.It aims to shorten the code length and provide the easiest way to develop Web Applications.

3.The primary feature of Spring Boot is Autoconfiguration. It automatically configures the classes based on the requirement.

4.It helps to create a stand-alone application with less configuration.(sometimes ZERO configuration)

5.It reduces boilerplate code.

6.Spring Boot offers embedded server such as Jetty and Tomcat, etc

7.Spring Boot comes with the concept of starter in pom.xml file that internally takes care of downloading the dependencies JARs based on Spring Boot Requirement.

REST API: https://www.geeksforgeeks.org/rest-api-introduction/
=========
REST stands for REpresentational State Transfer. It is developed by Roy Thomas Fielding, who also developed HTTP.

 >>The main goal of RESTful web services is to make web services more effective.

 >>RESTful web services try to define services using the different concepts that are already present in HTTP.

 >>REST is an architectural approach, not a protocol.

 >>It does not define the standard message exchange format.We can build REST services with both XML and JSON. 
 JSON is more popular format with REST. 
 
 The key abstraction is a resource in REST. A resource can be anything. It can be accessed through a Uniform Resource Identifier (URI).
 
 The resource has representations like XML, HTML, and JSON. The current state capture by representational resource. When we request a resource, we provide the representation of the resource. The important methods of HTTP are:

GET: It reads a resource.(retrieving)
PUT: It updates an existing resource.(updating)
POST: It creates a new resource.(creating/inserting)
DELETE: It deletes the resource.(deleting)

POST /users: It creates a user.

GET /users/{id}: It retrieves the detail of a user.

GET /users: It retrieves the detail of all users.

DELETE /users: It deletes all users.

DELETE /users/{id}: It deletes a user.

GET /users/{id}/posts/post_id: It retrieve the detail of a specific post.

POST / users/{id}/ posts: It creates a post of the user.



Annotations:
=============
1.@SpringBootApplication:
=========================
A single @SpringBootApplication annotation is used to enable the following annotations:

@EnableAutoConfiguration: It enables the Spring Boot auto-configuration mechanism.
@ComponentScan: It scans the package where the application is located.
@Configuration: It allows us to register extra beans in the context or import additional configuration classes.

2.@Autowired: 
=============
Spring provides annotation-based auto-wiring by providing @Autowired annotation. It is used to autowire spring bean on setter methods, instance variable, and constructor. When we use @Autowired annotation, the spring container auto-wires the bean by matching data-type.

3.@Configuration:
==================
It is a class-level annotation. The class annotated with @Configuration used by Spring Containers as a source of bean definitions.
 
4.@ComponentScan:
=================
It is used when we want to scan a package for beans. It is used with the annotation @Configuration. We can also specify the base packages to scan for Spring Components.

5.@Bean: 
=========
It is a method-level annotation. It is an alternative of XML <bean> tag. It tells the method to produce a bean to be managed by Spring Container.

6.@Component: 
=============
It is a class-level annotation. It is used to mark a Java class as a bean. A Java class annotated with @Component is found during the classpath. The Spring Framework pick it up and configure it in the application context as a Spring Bean.

7.@Controller: 
==============
The @Controller is a class-level annotation. It is a specialization of @Component. It marks a class as a web request handler. It is often used to serve web pages. By default, it returns a string that indicates which route to redirect. It is mostly used with @RequestMapping annotation.

8.@Service: 
============
It is also used at class level. It tells the Spring that class contains the business logic.

9.@Repository: 
==============
It is a class-level annotation. The repository is a DAOs (Data Access Object) that access the database directly. The repository does all the operations related to the database.

Spring Boot Annotations:
-------------------------

@EnableAutoConfiguration:
=========================
 It auto-configures the bean that is present in the classpath and configures it to run the methods. The use of this annotation is reduced in Spring Boot 1.2.0 release because developers provided an alternative of the annotation, i.e. @SpringBootApplication.
 
@SpringBootApplication:
=======================
 It is a combination of three annotations @EnableAutoConfiguration, @ComponentScan, and @Configuration.
 
Spring MVC and REST Annotations:
================================

@RequestMapping:
-----------------
 It is used to map the web requests. It has many optional elements like consumes, header, method, name, params, path, produces, and value. We use it with the class as well as the method.

@GetMapping:
-------------
 It maps the HTTP GET requests on the specific handler method. It is used to create a web service endpoint that fetches It is used instead of using: @RequestMapping(method = RequestMethod.GET)
@PostMapping:
-------------
 It maps the HTTP POST requests on the specific handler method. It is used to create a web service endpoint that creates It is used instead of using: @RequestMapping(method = RequestMethod.POST)
@PutMapping:
------------
 It maps the HTTP PUT requests on the specific handler method. It is used to create a web service endpoint that creates or updates It is used instead of using: @RequestMapping(method = RequestMethod.PUT)
@DeleteMapping:
---------------
 It maps the HTTP DELETE requests on the specific handler method. It is used to create a web service endpoint that deletes a resource. It is used instead of using: @RequestMapping(method = RequestMethod.DELETE)
@PatchMapping:
--------------
 It maps the HTTP PATCH requests on the specific handler method. It is used instead of using: @RequestMapping(method = RequestMethod.PATCH)
@RequestBody: 
-------------
It is used to bind HTTP request with an object in a method parameter. Internally it uses HTTP MessageConverters to convert the body of the request. When we annotate a method parameter with @RequestBody, the Spring framework binds the incoming HTTP request body to that parameter.
@ResponseBody:
---------------
 It binds the method return value to the response body. It tells the Spring Boot Framework to serialize a return an object into JSON and XML format.
@PathVariable:
--------------
 It is used to extract the values from the URI. It is most suitable for the RESTful web service, where the URL contains a path variable. We can define multiple @PathVariable in a method.
@RequestParam:
--------------
 It is used to extract the query parameters form the URL. It is also known as a query parameter. It is most suitable for web applications. It can specify default values if the query parameter is not present in the URL.
@RequestHeader:
---------------
 It is used to get the details about the HTTP request headers. We use this annotation as a method parameter. The optional elements of the annotation are name, required, value, defaultValue. For each detail in the header, we should specify separate annotations. We can use it multiple time in a method
@RestController:
----------------
 It can be considered as a combination of @Controller and @ResponseBody annotations. The @RestController annotation is itself annotated with the @ResponseBody annotation. It eliminates the need for annotating each method with @ResponseBody.
@RequestAttribute:
-------------------
 It binds a method parameter to request attribute. It provides convenient access to the request attributes from a controller method. With the help of @RequestAttribute annotation, we can access objects that are populated on the server-side.
 
 
 
 
 
 
 
 
 
 
 